version: '3.8'

volumes:
  authup:
  mysql:
  backend-data:

services:
  mysql:
    image: mysql:latest
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 3s
      timeout: 5s
      retries: 5
    environment:
      MYSQL_ROOT_HOST: "%"
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-start123}
    volumes:
      - mysql:/var/lib/mysql
    networks:
      dnpm:

  authup:
    image: authup/authup:latest
    pull_policy: always
    restart: unless-stopped
    volumes:
      - authup:/usr/src/app/writable
    depends_on:
      mysql:
        condition: service_healthy
    command: server/core start
    environment:
      - PUBLIC_URL=${BASE_URL}/auth/
      - ROBOT_ADMIN_ENABLED=true
      - ROBOT_ADMIN_SECRET=${AUTHUP_SECRET:-start123}
      - ROBOT_ADMIN_SECRET_RESET=true
      - DB_TYPE=mysql
      - DB_HOST=mysql
      - DB_USERNAME=root
      - DB_PASSWORD=${MYSQL_ROOT_PASSWORD:-start123}
      - DB_DATABASE=auth
    networks:
      dnpm:

  portal:
    image: ghcr.io/kohlbacherlab/dnpm-dip-portal:latest
    pull_policy: always
    container_name: portal
    restart: unless-stopped
    environment:
      - NUXT_PUBLIC_API_URL=${BASE_URL}/api/
      - NUXT_PUBLIC_AUTHUP_URL=${BASE_URL}/auth/
    networks:
      dnpm:

  backend:
    container_name: backend
    image: ghcr.io/kohlbacherlab/dnpm-dip-backend:latest
    # Optionally set system UserID with corresponding access permissions to data persistence directory
    #user: "UserID"
    environment:
      - LOCAL_SITE=${BACKEND_LOCAL_SITE}   # Format: {Site-ID}:{Site-name}, e.g. UKT:TÃ¼bingen
      - RD_RANDOM_DATA=${BACKEND_RD_RANDOM_DATA:--1}
      - MTB_RANDOM_DATA=${BACKEND_MTB_RANDOM_DATA:--1}
      - HATEOAS_HOST=${BASE_URL}
      - CONNECTOR_TYPE=${BACKEND_CONNECTOR_TYPE:-broker}
      - AUTHUP_URL=${BACKEND_AUTHUP_URL:-robot://system:${AUTHUP_SECRET:-start123}@http://authup:3000}
    volumes:
      - './backend-config:/dnpm_config'
      - './backend-data:/dnpm_data'
    depends_on:
      authup:
        condition: service_healthy
    networks:
      dnpm:

  nginx:
    image: nginxproxy/nginx-proxy:alpine
    ports:
      - ${PUBLIC_PORT:-443}:443
    volumes:
      - './nginx_tls.conf:/etc/nginx/nginx.conf'
      - '/var/run/docker.sock:/tmp/docker.sock:ro'
      - './certs/dnpm-ca-cert.pem:/etc/ssl/certs/dnpm-ca-cert.pem'         # DNPM CA as trusted CA for Client certs in mutual TLS
      - './certs/ca-cert-chain.pem:/etc/ssl/certs/ca-cert-chain.pem'       # Chain of Trusted CAs for remote host verification
      - './certs/dnpm-server-cert.pem:/etc/ssl/certs/dnpm-server-cert.pem' # Server certificate
      - './certs/dnpm-server-key.pem:/etc/ssl/certs/dnpm-server-key.pem'   # Server private key
      - './certs/dnpm-client-cert.pem:/etc/ssl/certs/dnpm-client-cert.pem' # Client certificate
      - './certs/dnpm-client-key.pem:/etc/ssl/certs/dnpm-client-key.pem'   # Client private key
    depends_on:
      - authup
      - portal
      - backend
    networks:
      dnpm:

networks:
  dnpm:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: dnpm
    ipam:
      driver: default
      config:
        - subnet: 172.50.1.0/24
